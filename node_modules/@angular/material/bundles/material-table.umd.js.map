{"version":3,"file":"material-table.umd.js","sources":["../../../../../../src/material/table/table.ts","../../../../../../src/material/table/cell.ts","../../../../../../src/material/table/row.ts","../../../../../../src/material/table/text-column.ts","../../../../../../src/material/table/table-module.ts","../../../../../../src/material/table/table-data-source.ts","../../../../../../src/material/table/public-api.ts","../../../../../../src/material/table/index.ts"],"names":["__extends","Component","CDK_TABLE_TEMPLATE","CdkTable","ViewEncapsulation","ChangeDetectionStrategy","Directive","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","Input","ElementRef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","CdkRow","CdkTextColumn","NgModule","CdkTableModule","CommonModule","MatCommonModule","BehaviorSubject","Subject","Subscription","_isNumberValue","merge","observableOf","combineLatest","map","DataSource"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  inputs: ['sticky'],\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + 'â¬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter])\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange])\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange])\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\nexport * from './text-column';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}