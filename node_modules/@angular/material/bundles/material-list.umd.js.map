{"version":3,"file":"material-list.umd.js","sources":["../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/public-api.ts","../../../../../../src/material/list/index.ts"],"names":["mixinDisableRipple","__extends","Subject","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Directive","takeUntil","setLines","ChangeDetectorRef","Optional","ContentChildren","MatLine","ContentChild","NG_VALUE_ACCESSOR","forwardRef","coerceBooleanProperty","Inject","ViewChild","Input","EventEmitter","SelectionModel","FocusKeyManager","__values","hasModifierKey","SPACE","ENTER","HOME","END","A","UP_ARROW","DOWN_ARROW","Attribute","Output","NgModule","MatLineModule","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","CommonModule","MatDividerModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey') && !manager.isTyping()) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}