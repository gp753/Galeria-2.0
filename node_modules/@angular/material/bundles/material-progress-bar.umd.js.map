{"version":3,"file":"material-progress-bar.umd.js","sources":["../../../../../../src/material/progress-bar/progress-bar.ts","../../../../../../src/material/progress-bar/progress-bar-module.ts","../../../../../../src/material/progress-bar/public-api.ts","../../../../../../src/material/progress-bar/index.ts"],"names":["mixinColor","InjectionToken","inject","DOCUMENT","__extends","EventEmitter","Subscription","coerceNumberProperty","fromEvent","filter","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","NgZone","Optional","Inject","ANIMATION_MODULE_TYPE","Input","ViewChild","Output","NgModule","CommonModule","MatCommonModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {fromEvent, Observable, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(coerceNumberProperty(v) || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressBarMode = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return null;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n\n  static ngAcceptInputType_value: NumberInput;\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-bar-module';\nexport * from './progress-bar';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}