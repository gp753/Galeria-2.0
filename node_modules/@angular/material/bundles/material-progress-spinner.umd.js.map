{"version":3,"file":"material-progress-spinner.umd.js","sources":["../../../../../../src/material/progress-spinner/progress-spinner.ts","../../../../../../src/material/progress-spinner/progress-spinner-module.ts","../../../../../../src/material/progress-spinner/public-api.ts","../../../../../../src/material/progress-spinner/index.ts"],"names":["mixinColor","InjectionToken","__extends","coerceNumberProperty","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Platform","Optional","Inject","DOCUMENT","ANIMATION_MODULE_TYPE","Input","NgModule","MatCommonModule","CommonModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  static ngAcceptInputType_diameter: NumberInput;\n  static ngAcceptInputType_strokeWidth: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nexport class MatProgressSpinnerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-spinner-module';\nexport {\n  MatProgressSpinner,\n  MatSpinner,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n  ProgressSpinnerMode,\n  MatProgressSpinnerDefaultOptions,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n} from './progress-spinner';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}