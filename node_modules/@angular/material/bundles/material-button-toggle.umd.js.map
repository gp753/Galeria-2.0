{"version":3,"file":"material-button-toggle.umd.js","sources":["../../../../../../src/material/button-toggle/button-toggle.ts","../../../../../../src/material/button-toggle/button-toggle-module.ts","../../../../../../src/material/button-toggle/public-api.ts","../../../../../../src/material/button-toggle/index.ts"],"names":["InjectionToken","NG_VALUE_ACCESSOR","forwardRef","EventEmitter","coerceBooleanProperty","SelectionModel","Directive","ChangeDetectorRef","Optional","Inject","ContentChildren","Input","Output","mixinDisableRipple","__extends","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","FocusMonitor","Attribute","ViewChild","NgModule","MatCommonModule","MatRippleModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle), {\n    // Note that this would technically pick up toggles\n    // from nested groups, but that's not a case that we support.\n    descendants: true\n  }) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_vertical: BooleanInput;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-toggle';\nexport * from './button-toggle-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}