{"version":3,"file":"material-snack-bar.umd.js","sources":["../../../../../../src/material/snack-bar/snack-bar-ref.ts","../../../../../../src/material/snack-bar/snack-bar-config.ts","../../../../../../src/material/snack-bar/simple-snack-bar.ts","../../../../../../src/material/snack-bar/snack-bar-animations.ts","../../../../../../src/material/snack-bar/snack-bar-container.ts","../../../../../../src/material/snack-bar/snack-bar-module.ts","../../../../../../src/material/snack-bar/snack-bar.ts","../../../../../../src/material/snack-bar/public-api.ts","../../../../../../src/material/snack-bar/index.ts"],"names":["Subject","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","trigger","state","style","transition","animate","__extends","take","NgZone","ElementRef","ChangeDetectorRef","ViewChild","CdkPortalOutlet","BasePortalOutlet","NgModule","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","PortalInjector","ComponentPortal","TemplateRef","portal","TemplatePortal","Breakpoints","takeUntil","OverlayConfig","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","Optional","SkipSelf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  DomPortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-module';\nexport * from './snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-config';\nexport * from './snack-bar-ref';\nexport * from './simple-snack-bar';\nexport * from './snack-bar-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}