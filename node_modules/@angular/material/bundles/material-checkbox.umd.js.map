{"version":3,"file":"material-checkbox.umd.js","sources":["../../../../../../src/material/checkbox/checkbox-config.ts","../../../../../../src/material/checkbox/checkbox.ts","../../../../../../src/material/checkbox/checkbox-required-validator.ts","../../../../../../src/material/checkbox/checkbox-module.ts","../../../../../../src/material/checkbox/public-api.ts","../../../../../../src/material/checkbox/index.ts"],"names":["InjectionToken","NG_VALUE_ACCESSOR","forwardRef","TransitionCheckState","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","__extends","EventEmitter","coerceBooleanProperty","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","FocusMonitor","NgZone","Attribute","Optional","Inject","ANIMATION_MODULE_TYPE","Input","Output","ViewChild","MatRipple","NG_VALIDATORS","Directive","CheckboxRequiredValidator","NgModule","CommonModule","MatRippleModule","MatCommonModule","ObserversModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  color?: ThemePalette;\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS =\n    new InjectionToken<MatCheckboxDefaultOptions>('mat-checkbox-default-options', {\n      providedIn: 'root',\n      factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxClickAction,\n  MatCheckboxDefaultOptions\n} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated `_clickAction` parameter to be removed, use\n               * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n               * @breaking-change 10.0.0\n               */\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n                  private _options?: MatCheckboxDefaultOptions) {\n    super(elementRef);\n    this._options = this._options || {};\n\n    if (this._options.color) {\n      this.color = this._options.color;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n    this._clickAction = this._clickAction || this._options.clickAction;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}