{"version":3,"file":"material-tree.umd.js","sources":["../../../../../../src/material/tree/node.ts","../../../../../../src/material/tree/padding.ts","../../../../../../src/material/tree/outlet.ts","../../../../../../src/material/tree/tree.ts","../../../../../../src/material/tree/toggle.ts","../../../../../../src/material/tree/tree-module.ts","../../../../../../src/material/tree/data-source/flat-data-source.ts","../../../../../../src/material/tree/data-source/nested-data-source.ts","../../../../../../src/material/tree/public-api.ts","../../../../../../src/material/tree/index.ts"],"names":["mixinTabIndex","mixinDisabled","CdkTreeNode","__extends","Directive","ElementRef","CdkTree","Attribute","Input","CdkTreeNodeDef","coerceBooleanProperty","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","CdkTreeNodePadding","CdkTreeNodeOutlet","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","CdkTreeNodeToggle","NgModule","CdkTreeModule","CommonModule","MatCommonModule","take","BehaviorSubject","merge","map","DataSource"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}